#!/usr/bin/env python3
"""Plot optical properties (absorption and scattering cross section) from
Cscatter data.

Usage: plot_opt_prop <input> <output>

Arguments:

- input: Input file (output of Cscatter).
- output: Output plot (PDF).

Examples:

Plot optical properties of fragments.

bin/plot_opt_prop data/cscatter/opt_prop_fragments \
'plot/Optical properties fragments.pdf'
"""

import sys
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	lam = []
	abs = []
	sca = []
	asy = []
	with open(input_) as f:
		for i in range(14):
			f.readline()
		for l in f.readlines():
			r = l.split()
			if len(r) != 4:
				continue
			lam += [float(r[0])]
			abs += [float(r[1])]
			sca += [float(r[2])]
			asy += [float(r[3])]
	lam = np.array(lam, np.float64)
	abs = np.array(abs, np.float64)
	sca = np.array(sca, np.float64)
	asy = np.array(asy, np.float64)

	mpl.rc('font', family='Public Sans')
	mpl.rc('axes', linewidth=0.3)
	mpl.rc('axes', grid=True)
	mpl.rc('lines', linewidth=1)
	mpl.rc('xtick.major', width=0.3)
	mpl.rc('ytick.major', width=0.3)
	mpl.rc('legend', framealpha=1)
	mpl.rc('legend', facecolor='#eeeeee')
	mpl.rc('legend', edgecolor='none')
	mpl.rc('legend', fancybox=False)
	mpl.rc('legend', fontsize=9)
	mpl.rc('grid', color='k')
	mpl.rc('grid', alpha=0.2)
	mpl.rc('grid', lw=0.1)

	cmap = plt.get_cmap('tab10')
	plt.figure(figsize=(12, 5))
	plt.subplots_adjust(wspace=0.35)
	plt.subplot(1, 2, 1)
	pext = plt.plot(lam*1e6, (abs + sca)*1e12,
		color='k',
		label='Extinction cross section',
	)
	psca = plt.plot(lam*1e6, sca*1e12,
		color=cmap(0),
		label='Scattering cross section'
	)
	pabs = plt.plot(lam*1e6, abs*1e12,
		color=cmap(3),
		label='Absorption cross section'
	)
	plt.xlim(0.2, 100)
	plt.ylim(5, 2e4)
	plt.xscale('log')
	plt.yscale('log')
	plt.xlabel('Wavelength ($\mu$m)')
	plt.ylabel('Cross section ($\mu$m)')
	plt.title('Logarithmic scale')
	plt.twinx()
	pssa = plt.plot(lam*1e6, sca/(sca + abs),
		color='k',
		linestyle='dashed',
		label='Single scattering albedo'
	)
	pasy = plt.plot(lam*1e6, asy,
		color='k',
		linestyle='dotted',
		label='Asymmetry factor'
	)
	plt.ylabel('Single scattering albedo (1), asymmetry factor (1)')
	plt.ylim(0, 1)
	plots = [pext, psca, pabs, pssa, pasy]
	plt.legend(
		handles=[p[0] for p in plots],
		fontsize=10,
		loc='lower right'
	)
	plt.subplot(1, 2, 2)
	plt.plot(lam*1e6, (abs + sca)*1e12, color='k', label='Extinction')
	plt.plot(lam*1e6, sca*1e12, color=cmap(0), label='Scattering')
	plt.plot(lam*1e6, abs*1e12, color=cmap(3), label='Absorption')
	plt.xlim(0.2, 100)
	plt.ylim(1, 13e3)
	plt.xlabel('Wavelength ($\mu$m)')
	plt.ylabel('Cross section ($\mu$m)')
	plt.title('Normal scale')
	plt.twinx()
	plt.plot(lam*1e6, sca/(sca + abs),
		color='k',
		linestyle='dashed',
		label='Single scattering albedo'
	)
	plt.plot(lam*1e6, asy,
		color='k',
		linestyle='dotted',
		label='Asymmetry factor'
	)
	plt.ylabel('Single scattering albedo (1), asymmetry factor (1)')
	plt.ylim(0, 1)
	plt.suptitle('Mie scattering')
	plt.savefig(output, bbox_inches='tight')
