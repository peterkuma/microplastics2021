#!/usr/bin/env python3
"""Plot refractive index.

Usage: plot_refractive_index <input>... <output>

Arguments:

- input: Input file (CSV).
- output: Output plot file (PDF).

Examples:

bin/plot_refractive_index data/refractive_index/*.csv 'plot/Refractive index.pdf'
"""

import sys
import os
import csv
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from numpy.polynomial.polynomial import Polynomial
from scipy.interpolate import interp1d, splrep, splev
from scipy.optimize import minimize

if __name__ == '__main__':
	if len(sys.argv) < 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1:-1]
	output = sys.argv[-1]

	mpl.rc('font', family='Public Sans')
	mpl.rc('axes', linewidth=0.3)
	mpl.rc('axes', grid=True)
	mpl.rc('lines', linewidth=1)
	mpl.rc('xtick.major', width=0.3)
	mpl.rc('ytick.major', width=0.3)
	mpl.rc('legend', framealpha=1)
	mpl.rc('legend', facecolor='#eeeeee')
	mpl.rc('legend', edgecolor='none')
	mpl.rc('legend', fancybox=False)
	mpl.rc('legend', fontsize=9)
	mpl.rc('grid', color='k')
	mpl.rc('grid', alpha=0.2)
	mpl.rc('grid', lw=0.1)

	dd = []

	for filename in input_:
		lam = []
		nr = []
		ni = []
		name = os.path.basename(filename)[:-4].replace(',', ' ').strip()
		source = name.split()[:-1]
		polymer = name.split()[-1]
		with open(filename) as f:
			reader = csv.DictReader(f)
			for r in reader:
				lam0 = np.nan
				nr0 = np.nan
				ni0 = np.nan
				if 'Wavelength (um)' in r:
					lam0 = float(r['Wavelength (um)'])*1e-6
				if 'Wavenumber (cm-1)' in r:
					lam0 = 1e-2/float(r['Wavenumber (cm-1)'])
				if 'Wavelength (nm)' in r:
					lam0 = float(r['Wavelength (nm)'])*1e-9
				if 'Refractive index' in r:
					nr0 = float(r['Refractive index']) \
						if r['Refractive index'] != '' \
						else np.nan
				if 'Absorption coefficient (cm-1)' in r:
					ni0 = float(r['Absorption coefficient (cm-1)'])*1e2/(4.*np.pi)*lam0
				if 'Extinction coefficient' in r:
					ni0 = float(r['Extinction coefficient']) #*4*np.pi/lam0
				lam.append(lam0)
				nr.append(nr0)
				ni.append(ni0)
		dd.append({
			'lam': np.array(lam, np.float64),
			'nr': np.array(nr, np.float64),
			'ni': np.array(ni, np.float64),
			'name': name,
			'source': source,
			'polymer': polymer,
		})

	polymers = [d['polymer'] for d in dd]
	sources = [d['source'] for d in dd]

	x1 = np.log10(np.array([u for d in dd for u in list(d['lam'])]))
	y1 = np.array([u for d in dd for u in list(d['nr'])])
	mask = ~np.isnan(y1)
	x1 = x1[mask]
	y1 = y1[mask]
	x_s1 = np.arange(np.log10(0.4e-6), np.log10(1e-6), np.log10(0.41e-6) - np.log10(0.4e-6))
	x_ss1 = 0.5*(x_s1[:-1] + x_s1[1:])
	n = len(x_ss1)
	y_ss1 = np.full(n, np.nan, np.float64)
	for i in range(n):
		mask = (x1 >= x_s1[i]) & (x1 < x_s1[i+1])
		y_ss1[i] = np.mean(y1[mask])
	mask = ~np.isnan(y_ss1)
	x_ss1 = x_ss1[mask]
	y_ss1 = y_ss1[mask]
	def f(par, x, y):
		A, lam0 = par
		return np.sum((y - np.sqrt(1. + A*x**2./(x**2. - lam0**2.)))**2.)
	res = minimize(f, [1.5, 0.1e-6], (10.**x_ss1, y_ss1))
	print(res.x)
	A, lam0 = res.x
	def p1(x):
		return np.sqrt(1. + A*(10.**x)**2./((10.**x)**2. - lam0**2.))

	x2 = np.log10(np.array([u for d in dd for u in list(d['lam'])]))
	y2 = np.array([u for d in dd for u in list(d['ni'])])
	mask = ~np.isnan(y2)
	x2 = x2[mask]
	y2 = y2[mask]
	x_s2 = np.arange(np.log10(0.4e-6), np.log10(200e-6), np.log10(0.45e-6) - np.log10(0.4e-6))
	x_ss2 = 0.5*(x_s2[:-1] + x_s2[1:])
	n = len(x_ss2)
	y_ss2 = np.full(n, np.nan, np.float64)
	for i in range(n):
		mask = (x2 >= x_s2[i]) & (x2 < x_s2[i+1])
		y_ss2[i] = np.mean(y2[mask])
	y_ss2 = np.log10(y_ss2)
	coef = np.polyfit(x_ss2[~np.isnan(y_ss2)], y_ss2[~np.isnan(y_ss2)], 4)[::-1]
	coef = np.array([float(np.format_float_positional(x, precision=6, fractional=False)) for x in coef])
	print(coef)
	poly = np.poly1d(coef[::-1])
	def p2(x):
		return np.where(
			x < np.log10(0.4e-6),
			poly(np.log10(0.4e-6)),
			np.where(
				x > np.log10(100e-6),
				poly(np.log10(100e-6)),
				poly(x)
			)
		)

	plt.figure(figsize=(15,5))
	cmap = plt.get_cmap('Accent')
	ncolors = 10
	LINESTYLE = ['solid', 'dashed', 'dotted', 'dashdot']

	def count(sources, polymers, source, polymer):
		n = 0
		for i in range(len(sources)):
			if sources[i] == source and polymers[i] == polymer:
				break
			if polymers[i] == polymer:
				n += 1
		return n

	plt.subplot(1, 2, 1)
	lam = np.arange(0.2e-6, 1000e-6, 0.01e-6)
	plt.plot(lam*1e6, p1(np.log10(lam)),
		color='k',
		label='polynomial'
	)
	plt.plot((10**x_ss1)*1e6, y_ss1,
		color='k',
		linestyle='dashed',
		label='mean',
	)
	for i, d in enumerate(dd):
		plt.plot(d['lam']*1e6, d['nr'],
			label=d['name'],
			color=cmap(polymers.index(d['polymer'])),
			linestyle=LINESTYLE[count(sources, polymers, d['source'], d['polymer'])],
		)
	plt.xscale('log')
	plt.xlim(0.2, 250)
	plt.ylim(1, 2)
	plt.yticks(np.arange(1, 2.1, 0.1))
	plt.title('(a)')
	plt.xlabel(r'Wavelength $(\mathrm{\mu m}$)')
	plt.ylabel('Real part of refractive index')

	plt.subplot(1, 2, 2)
	lam = np.arange(0.2e-6, 200e-6, 0.01e-6)
	plt.plot(lam*1e6, (10**(p2(np.log10(lam)))), #*1e-2,
		color='k',
		label='polynomial'
	)
	plt.plot((10**x_ss2)*1e6, (10**y_ss2), #*1e-2,
		color='k',
		linestyle='dashed',
		label='mean',
	)
	for i, d in enumerate(dd):
		plt.plot(d['lam']*1e6, d['ni'], #*1e-2,
			label=d['name'],
			color=cmap(polymers.index(d['polymer'])),
			linestyle=LINESTYLE[count(sources, polymers, d['source'], d['polymer'])],
		)
	plt.xscale('log')
	plt.yscale('log')
	plt.xlim(0.2, 250)
	plt.ylim(1e-7, 1)
	plt.yticks([10**i for i in range(-7, 1)])
	plt.title('(b)')
	plt.xlabel(r'Wavelength $(\mathrm{\mu m}$)')
	plt.ylabel('Imaginary part of refractive index')
	plt.legend(fontsize=7, loc='lower right')

	plt.subplots_adjust(wspace=0.14)
	plt.savefig(output, bbox_inches='tight')
