#!/usr/bin/env python3
"""Plot flux profile.

Usage: plot_profile <input> <ref> <output> <title>

Arguments:

- input: Base name of the input files (NetCDF).
- ref: Reference base name (NetCDF).
- output: Output plot file (PDF).
- title: Plot title.

Examples:

Plot profiles of CIRC Case 6.

bin/plot_profile data/CIRC_case6_{mp,ref}/case6_sw 'plot/CIRC case 6 SW fragments.pdf' 'CIRC Case 6 100 MP fragments shortwave'
bin/plot_profile data/CIRC_case6_{mp,ref}/case6_lw 'plot/CIRC case 6 LW fragments.pdf' 'CIRC Case 6 100 MP fragments longwave'
"""

import sys
import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import ds_format as ds
import seaborn as sns

mpl.rc('font', family='Public Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=5.5)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

VARS = [
	[0, 'dflx', 'Downward diffuse flux'],
	[0, 'uflx', 'Upward flux'],
	[1, 'hrts', 'Heating rate'],
]

def read(basename):
	do = {}
	for _, var, label in VARS:
		filename = basename + '.' + var + '.nc'
		d = ds.read(filename)
		do['plev_' + var] = d['plev']
		do[var] = d[var]
	return do

def plot(d, d_ref, relative=False):
	i = 0
	plots = []
	labels = []
	dd = [d, d_ref] if d_ref is not None else [d]
	for dx in dd:
		if dx is d_ref and relative: continue
		linestyle = 'solid' if dx is d else 'dashed'
		for type_, var, label in VARS:
			if type_ != 0:
				continue
			p, = plt.plot(
				dx[var][:,0,0] if not relative \
					else dx[var][:,0,0] - d_ref[var][:,0,0],
				dx['plev_' + var]*1e-2,
				label=label,
				color=cmap[i],
				linestyle=linestyle,
			)
			plots += [p]
			labels += [label + (' (ref)' if dx is d_ref else '')]
			i += 1
	plt.ylabel('Pressure (hPa)')
	if not relative:
		plt.xlim(0, 400)
		plt.xlabel('Flux (Wm$^{-2}$)')
	else:
		plt.xlim(-1.5, 1.5)
		plt.axvline(x=0, lw=0.2, color='k')
		plt.xlabel('Relative flux (Wm$^{-2}$)')
	plt.ylim(1000, 0)
	plt.gca().set_yticks(np.arange(0, 1100, 100))
	plt.twiny()
	for dx in dd:
		if dx is d_ref and relative: continue
		linestyle = 'solid' if dx is d else 'dashed'
		for type_, var, label in VARS:
			if type_ != 1:
				continue
			p, = plt.plot(
				dx[var][:,0,0] if not relative \
					else (dx[var][:,0,0] - d_ref[var][:,0,0]),
				dx['plev_' + var]*1e-2,
				label=label,
				color='k',
				linestyle=linestyle,
			)
			plots += [p]
			labels += [label + (' (ref)' if dx is d_ref else '')]
	if not relative:
		plt.xlim(-8, 8)
		plt.gca().set_xticks(np.arange(-8, 10, 2))
		plt.xlabel('Heating rate (K/day)')
		plt.legend(handles=plots, labels=labels, loc='upper right', )
	else:
		plt.xlim(-0.015, 0.015)
		plt.gca().set_xticks(np.arange(-0.015, 0.016, 0.005))
		plt.xlabel('Relative heating rate (K/day)')
	plt.gca().xaxis.set_label_coords(0.5, 1.085)
	plt.grid(False)

if __name__ == '__main__':
	if len(sys.argv) not in (4, 5):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	ref = sys.argv[2] if len(sys.argv) == 5 else None
	output = sys.argv[-2]
	title = sys.argv[-1]

	d = read(input_)
	d_ref = read(ref) if ref is not None else None

	cmap = sns.color_palette('colorblind', 8)

	if d_ref is not None:
		plt.figure(figsize=[11, 5])
		plt.subplot(1, 2, 1)
		plot(d, d_ref)
		plt.subplot(1, 2, 2)
		plot(d, d_ref, relative=True)
		dtoa = d['uflx'][0] - d_ref['uflx'][0]
		plt.text(0.02, 0.975, '$\Delta$ TOA upward flux = %f Wm$^{-1}$' % dtoa,
			transform=plt.gca().transAxes,
			fontsize=6.5,
			horizontalalignment='left',
			verticalalignment='top',
			bbox=dict(facecolor='#eeeeee', edgecolor='none'),
		)
	else:
		plt.figure(figsize=[5, 5])
		plot(d, d_ref)
	plt.suptitle('Radiative transfer profile: %s' % title, y=1.015)
	plt.savefig(output, bbox_inches='tight')
