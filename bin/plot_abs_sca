#!/usr/bin/env python3
"""Plot absorption and scattering of microplastics.

Usage: plot_abs_sca <input> <output>

Arguments:

- input: Input directory with input files (txt).
- output: Output plot (PDF).

Example:

Plot absorption and scattering based on txt files in data/opt_prop.

bin/plot_abs_sca data/opt_prop 'plot/Microplastics optical properties.pdf'

Author: Laura Revell
"""

import sys
import os
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd

if len(sys.argv) != 3:
    sys.stderr.write(sys.modules[__name__].__doc__)
    sys.exit(1)

input_ = sys.argv[1]
output = sys.argv[2]

df = pd.read_csv(os.path.join(input_, "lam_fra.txt"),index_col=False); lam_fra = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "abs_fra.txt"),index_col=False); abs_fra = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "sca_fra.txt"),index_col=False); sca_fra = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "asy_fra.txt"),index_col=False); asy_fra = np.array(df[1:])

df = pd.read_csv(os.path.join(input_, "lam_fib.txt"),index_col=False); lam_fib = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "abs_fib.txt"),index_col=False); abs_fib = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "sca_fib.txt"),index_col=False); sca_fib = np.array(df[1:])
df = pd.read_csv(os.path.join(input_, "asy_fib.txt"),index_col=False); asy_fib = np.array(df[1:])

mpl.rc('font', family='Public Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

cmap = plt.get_cmap('tab10')
cm = 1/2.54 #cm in inches
plt.figure(figsize=(12*cm,18*cm))
plt.subplot2grid(shape=(10,1), loc=(0,0),colspan=1,rowspan=3)
pext = plt.plot(lam_fra*1e6, (abs_fra + sca_fra)*1e12,color='k',lw=2,label='Extinction cross section')
psca = plt.plot(lam_fra*1e6, sca_fra*1e12,	color=cmap(0),label='Scattering cross section')
pabs = plt.plot(lam_fra*1e6, abs_fra*1e12,	color=cmap(3),label='Absorption cross section')
plt.xlim(0.2, 100)
plt.ylim(5, 2e4)
plt.xscale('log')
plt.yscale('log')
plt.ylabel(r'Cross section $(\mathrm{\mu m}^2$)',fontsize=10)
plt.title('a',loc='left')
plt.twinx()
pssa = plt.plot(lam_fra*1e6, sca_fra/(sca_fra + abs_fra),color='k',linestyle='dashed',label='Single scattering albedo')
pasy = plt.plot(lam_fra*1e6, asy_fra,color='k',linestyle='dotted',label='Asymmetry factor')
plt.ylabel('Single scattering albedo (1), \nasymmetry factor (1)',fontsize=10)
plt.ylim(0, 1)
plots = [pext, psca, pabs, pssa, pasy]
plt.tight_layout(h_pad=0.05,w_pad=0)

plt.subplot2grid(shape=(10,1), loc=(4,0),colspan=1,rowspan=3)
pext = plt.plot(lam_fib*1e6, (abs_fib + sca_fib)*1e12, 	color='k',lw=2, label='Extinction cross section')
psca = plt.plot(lam_fib*1e6, sca_fib*1e12, color=cmap(0), label='Scattering cross section')
pabs = plt.plot(lam_fib*1e6, abs_fib*1e12, color=cmap(3), label='Absorption cross section')
plt.xlim(0.2, 100)
plt.ylim(5, 3e4)
plt.xscale('log')
plt.yscale('log')
plt.ylabel(r'Cross section $(\mathrm{\mu m}^2$)',fontsize=10)
plt.title('b',loc='left')
plt.twinx()
pssa = plt.plot(lam_fib*1e6, sca_fib/(sca_fib + abs_fib),color='k',linestyle='dashed',label='Single scattering albedo')
pasy = plt.plot(lam_fib*1e6, asy_fib,color='k',linestyle='dotted',label='Asymmetry factor')
plt.ylabel('Single scattering albedo (1), \nasymmetry factor (1)',fontsize=10)
plt.ylim(0, 1)
plots = [pext, psca, pabs, pssa, pasy]
plt.tight_layout(h_pad=0.05,w_pad=0)
plt.legend(
    handles=[p[0] for p in plots],
    fontsize=8,
    loc='lower right'
)

h = 6.62607004e-34 ; c = 299792458 ; k = 1.38064852e-23 ; T_sun = 6000 ; T_earth = 200
lam_um_sun = np.arange(0.2,5,0.01)
lam_sun = np.array(lam_um_sun)/1e6

B_sun = np.empty((np.shape(lam_sun))); B_sun[:] = np.nan
for i in range(0,np.size(lam_sun)):
    B_sun[i] = (8*np.pi*h*c)/(np.power(lam_sun[i],5)*(np.exp((h*c)/(lam_sun[i]*k*T_sun))-1))

lam_um_earth = np.arange(5,100,0.1)
lam_earth = np.array(lam_um_earth)/1e6

B_earth = np.empty((np.shape(lam_earth))); B_earth[:] = np.nan
for i in range(0,np.size(lam_earth)):
    B_earth[i] = (8*np.pi*h*c)/(np.power(lam_earth[i],5)*(np.exp((h*c)/(lam_earth[i]*k*T_earth))-1))


ax = plt.subplot2grid(shape=(10,1), loc=(8,0),colspan=1,rowspan=2)
ax.plot(lam_um_sun,B_sun, color='k', lw=2,label='Sun')
ax.plot(lam_um_earth,B_earth*2.4e7, color='k', lw=2,linestyle=':',label='Earth')
ax.set_xscale('log')
ax.set_xlim(0.2,100)
ax.set_ylim(0,1.6e6)
plt.legend(loc='upper right',fontsize=9)

ax.text(0.22, 1.4e6, 'UV', color='k', fontdict={'fontsize': 8})
ax.text(0.5, 1.45e6, 'Vis', color='k', fontdict={'fontsize': 8})
ax.annotate('', (0.4, 1.37e6), (0.75, 1.37e6), arrowprops={'arrowstyle': '<|-|>','color': 'k', 'lw': 2})
ax.text(4, 1.4e6, 'IR', color='k', fontdict={'fontsize': 8})
ax.text(8.5, 1.4e6, 'AW', color='k', fontdict={'fontsize': 8})
ax.axvline(0.4, 0, 6e6, c='k', ls='--')#show visible
ax.axvline(0.75, 0, 6e6, c='k', ls='--')#visible
ax.axvline(8, 0, 6e6, c='k', ls='--')#atmos window
ax.axvline(12, 0, 6e6, c='k', ls='--')#atmos window
ax.annotate('', (8, 1.33e6), (12, 1.33e6), arrowprops={'arrowstyle': '<|-|>','color': 'k', 'lw': 1})
ax.yaxis.set_visible(False)
ax.set_xlabel(r'Wavelength $(\mathrm{\mu m}$)',fontsize=10)
plt.grid(b=False,which='major',axis='y')

rainbow_rgb = { (0.400, 0.440): '#8b00ff', (0.440, 0.460): '#4b0082',
                (0.460, 0.500): '#0000ff', (0.500, 0.570): '#00ff00',
                (0.570, 0.590): '#ffff00', (0.590, 0.620): '#ff7f00',
                (0.620, 0.750): '#ff0000'}
for wv_range, rgb in rainbow_rgb.items():
    ax.axvspan(*wv_range, color=rgb, ec='none', alpha=0.3)

plt.title('c',loc='left')
plt.tight_layout(h_pad=0.05,w_pad=0)

plt.savefig(output, bbox_inches='tight')
