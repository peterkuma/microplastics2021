#!/usr/bin/env python3
"""Generate theoretical refractive index for use with Cscatter.

Usage: gen_refractive_index <A> <B> <c0> ... <cn>

Arguments:

- A, B: Coefficients of the real part.
- c0, ..., cn: Coefficients of the imaginary part (n-th order polynomial).

Examples:

Generate refractive index with coefficients as in the paper.

bin/gen_refractive_index 1.41 1.06e-7 552.717 458.983 140.513 18.8141 0.926965 \
> data/cscatter/refract
"""
import sys
import numpy as np
from numpy.polynomial.polynomial import Polynomial
#import matplotlib.pyplot as plt

if __name__ == '__main__':
	if len(sys.argv) < 4:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	A, B = [float(x) for x in sys.argv[1:3]]
	c = np.array([float(x) for x in sys.argv[3:]])
	poly = np.poly1d(c[::-1])

	def p1(x):
		return np.sqrt(1. + A*(10.**x)**2./((10.**x)**2. - B**2.))

	def p2(x):
		return np.where(
			x < np.log10(0.4e-6),
			poly(np.log10(0.4e-6)),
			np.where(
				x > np.log10(100e-6),
				poly(np.log10(100e-6)),
				poly(x)
			)
		)

	x = np.arange(np.log10(0.2e-6), np.log10(100.01e-6),
		np.log10(0.205e-6) - np.log10(0.2e-6))
	x = np.array(list(x) + [np.log10(2e-2)])
	#plt.plot(x*1e6, x/(4*np.pi)*(10**p2(np.log10(x))))
	#plt.plot(10.**x*1e6, 10.**p2(x))
	#plt.xscale('log')
	#plt.yscale('log')
	#plt.savefig('test.pdf')
	print('Wavelength (m)  Real Part       Imaginary Part')
	print('*BEGIN_DATA')
	for x0 in x:
		print('%.9E %.9E %.9E' % (
			10.**x0,
			p1(x0),
			#x0/(4*np.pi)*(10**p2(np.log10(x0)))
			10.**p2(x0)
		))
	print('*END')
